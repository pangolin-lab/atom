// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubkey.proto

package cmdpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PubKeyReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Op                   int32    `protobuf:"varint,3,opt,name=op,proto3" json:"op,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubKeyReq) Reset()         { *m = PubKeyReq{} }
func (m *PubKeyReq) String() string { return proto.CompactTextString(m) }
func (*PubKeyReq) ProtoMessage()    {}
func (*PubKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0315ee5eda72100, []int{0}
}

func (m *PubKeyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubKeyReq.Unmarshal(m, b)
}
func (m *PubKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubKeyReq.Marshal(b, m, deterministic)
}
func (m *PubKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyReq.Merge(m, src)
}
func (m *PubKeyReq) XXX_Size() int {
	return xxx_messageInfo_PubKeyReq.Size(m)
}
func (m *PubKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyReq proto.InternalMessageInfo

func (m *PubKeyReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PubKeyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PubKeyReq) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func init() {
	proto.RegisterType((*PubKeyReq)(nil), "cmdpb.PubKeyReq")
}

func init() { proto.RegisterFile("pubkey.proto", fileDescriptor_a0315ee5eda72100) }

var fileDescriptor_a0315ee5eda72100 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x28, 0x4d, 0xca,
	0x4e, 0xad, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0xce, 0x4d, 0x29, 0x48, 0x92,
	0xe2, 0x4d, 0x49, 0x4d, 0x4b, 0x2c, 0xcd, 0x29, 0x81, 0x88, 0x2a, 0x39, 0x72, 0x71, 0x06, 0x94,
	0x26, 0x79, 0xa7, 0x56, 0x06, 0xa5, 0x16, 0x0a, 0x09, 0x70, 0x31, 0x67, 0xa7, 0x56, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12,
	0x4c, 0x60, 0x21, 0x30, 0x5b, 0x88, 0x8f, 0x8b, 0x29, 0xbf, 0x40, 0x82, 0x59, 0x81, 0x51, 0x83,
	0x35, 0x88, 0x29, 0xbf, 0xc0, 0xc8, 0x86, 0x8b, 0x0d, 0x62, 0x91, 0x90, 0x11, 0x17, 0x47, 0x00,
	0x98, 0xe5, 0x92, 0x2f, 0x24, 0xa0, 0x07, 0xb6, 0x4f, 0x0f, 0x6e, 0xba, 0x94, 0x10, 0x54, 0xc4,
	0x05, 0xe2, 0x80, 0xa0, 0xd4, 0xe2, 0x02, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x3b, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0xe3, 0x88, 0xc6, 0xad, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubkeyClient is the client API for Pubkey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubkeyClient interface {
	PubkeyDo(ctx context.Context, in *PubKeyReq, opts ...grpc.CallOption) (*DefaultResp, error)
}

type pubkeyClient struct {
	cc *grpc.ClientConn
}

func NewPubkeyClient(cc *grpc.ClientConn) PubkeyClient {
	return &pubkeyClient{cc}
}

func (c *pubkeyClient) PubkeyDo(ctx context.Context, in *PubKeyReq, opts ...grpc.CallOption) (*DefaultResp, error) {
	out := new(DefaultResp)
	err := c.cc.Invoke(ctx, "/cmdpb.pubkey/PubkeyDo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubkeyServer is the server API for Pubkey service.
type PubkeyServer interface {
	PubkeyDo(context.Context, *PubKeyReq) (*DefaultResp, error)
}

func RegisterPubkeyServer(s *grpc.Server, srv PubkeyServer) {
	s.RegisterService(&_Pubkey_serviceDesc, srv)
}

func _Pubkey_PubkeyDo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubkeyServer).PubkeyDo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmdpb.pubkey/PubkeyDo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubkeyServer).PubkeyDo(ctx, req.(*PubKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pubkey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmdpb.pubkey",
	HandlerType: (*PubkeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubkeyDo",
			Handler:    _Pubkey_PubkeyDo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pubkey.proto",
}
